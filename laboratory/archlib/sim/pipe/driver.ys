#######################################################################
# Test for copying block of size 3;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $3, %rdx		# src and dst have 3 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq	%rax,%rax		# count = 0;
	irmovq	$1,%r8

loop15:
	irmovq	$15,%r11
	subq	%rdx,%r11
	jg		test7
      mrmovq	(%rdi),%r10
	rmmovq	%r10,(%rsi)
	andq	%r10,%r10
	jle		np1
	addq	%r8,%rax
np1:
	mrmovq	8(%rdi),%r10
	rmmovq	%r10,8(%rsi)
	andq	%r10,%r10
	jle		np2
	addq	%r8,%rax
np2:
	mrmovq	16(%rdi),%r10
	rmmovq	%r10,16(%rsi)
	andq	%r10,%r10
	jle		np3
	addq	%r8,%rax
np3:
	mrmovq	24(%rdi),%r10
	rmmovq	%r10,24(%rsi)
	andq	%r10,%r10
	jle		np4
	addq	%r8,%rax
np4:
	mrmovq	32(%rdi),%r10
	rmmovq	%r10,32(%rsi)
	andq	%r10,%r10
	jle		np5
	addq	%r8,%rax
np5:
	mrmovq	40(%rdi),%r10
	rmmovq	%r10,40(%rsi)
	andq	%r10,%r10
	jle		np6
	addq	%r8,%rax
np6:
	mrmovq	48(%rdi),%r10
	rmmovq	%r10,48(%rsi)
	andq	%r10,%r10
	jle		np7
	addq	%r8,%rax
np7:
      mrmovq	56(%rdi),%r10
	rmmovq	%r10,56(%rsi)
	andq	%r10,%r10
	jle		np8
	addq	%r8,%rax
np8:
	mrmovq	64(%rdi),%r10
	rmmovq	%r10,64(%rsi)
	andq	%r10,%r10
	jle		np9
	addq	%r8,%rax
np9:
	mrmovq	72(%rdi),%r10
	rmmovq	%r10,72(%rsi)
	andq	%r10,%r10
	jle		np10
	addq	%r8,%rax
np10:
	mrmovq	80(%rdi),%r10
	rmmovq	%r10,80(%rsi)
	andq	%r10,%r10
	jle		np11
	addq	%r8,%rax
np11:
	mrmovq	88(%rdi),%r10
	rmmovq	%r10,88(%rsi)
	andq	%r10,%r10
	jle		np12
	addq	%r8,%rax
np12:
	mrmovq	96(%rdi),%r10
	rmmovq	%r10,96(%rsi)
	andq	%r10,%r10
	jle		np13
	addq	%r8,%rax
np13:
	mrmovq	104(%rdi),%r10
	rmmovq	%r10,104(%rsi)
	andq	%r10,%r10
	jle		np14
	addq	%r8,%rax
np14:
	mrmovq	112(%rdi),%r10
	rmmovq	%r10,112(%rsi)
	andq	%r10,%r10
	jle		np15
	addq	%r8,%rax
np15:
	irmovq	$120,%r11
	addq	%r11,%rdi
	addq	%r11,%rsi
	iaddq	$-15,%rdx
	jmp		loop15
	
	
	
test7:
	irmovq	$6,%r11
	subq	%rdx,%r11
	jge		loop2
	mrmovq	(%rdi),%r10
	rmmovq	%r10,(%rsi)
	andq	%r10,%r10
	jle		np16
	addq	%r8,%rax
np16:
	mrmovq	8(%rdi),%r10
	rmmovq	%r10,8(%rsi)
	andq	%r10,%r10
	jle		np17
	addq	%r8,%rax
np17:
	mrmovq	16(%rdi),%r10
	rmmovq	%r10,16(%rsi)
	andq	%r10,%r10
	jle		np18
	addq	%r8,%rax
np18:
	mrmovq	24(%rdi),%r10
	rmmovq	%r10,24(%rsi)
	andq	%r10,%r10
	jle		np19
	addq	%r8,%rax
np19:
	mrmovq	32(%rdi),%r10
	rmmovq	%r10,32(%rsi)
	andq	%r10,%r10
	jle		np20
	addq	%r8,%rax
np20:
	mrmovq	40(%rdi),%r10
	rmmovq	%r10,40(%rsi)
	andq	%r10,%r10
	jle		np21
	addq	%r8,%rax
np21:
	mrmovq	48(%rdi),%r10
	rmmovq	%r10,48(%rsi)
	rrmovq	%rax,%r11
	addq	%r8,%r11
	andq	%r10,%r10
	cmovg	%r11,%rax
	irmovq	$56,%r10
	addq	%r10,%rdi
	addq	%r10,%rsi
	iaddq	$-7,%rdx
	
	
	

loop2:
      irmovq	$2,%r11
      subq		%rdx,%r11
      jg		loop1
      mrmovq	(%rdi),%r10
      rmmovq	%r10,(%rsi)
      rrmovq	%rax,%r11
      addq	%r8,%r11
      andq	%r10,%r10
	cmovg	%r11,%rax
	mrmovq	8(%rdi),%r10
	rmmovq	%r10,8(%rsi)
	rrmovq	%rax,%r11
	addq	%r8,%r11
	andq	%r10,%r10
	cmovg	%r11,%rax
	irmovq	$2,%r11
	addq	%r11,%rdi
	addq	%r11,%rsi
	iaddq	$-2,%rdx
	jmp		loop2
	

loop1:
	subq	%r8,%rdx
	jl		Done
	mrmovq	(%rdi),%r10
	rmmovq	%r10,(%rsi)
	rrmovq	%rax,%rcx
	addq	%r8,%rcx
	andq	%r10,%r10
	cmovg	%rcx,%rax
	irmovq	$8,%r10
	addq	%r10,%rdi
	addq	%r10,%rsi
	
	
      
	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 2.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $2,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $3,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
